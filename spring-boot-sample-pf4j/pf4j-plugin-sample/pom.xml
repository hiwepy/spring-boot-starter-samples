<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>com.github.hiwepy</groupId>
	<artifactId>pf4j-plugin</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	
	<modules>
		<module>pf4j-plugin-api</module>
		<module>pf4j-plugin-impl1</module>
		<module>pf4j-plugin-impl2</module>
		<module>pf4j-plugin-test</module>
	</modules>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<junit.version>4.12</junit.version>
		<commons-io.version>2.5</commons-io.version>
		<commons-lang.version>2.6</commons-lang.version>
		<fastjson.version>1.2.61</fastjson.version>
		<javax.servlet-api.version>3.1.0</javax.servlet-api.version>
		<ro.pf4j.version>1.3.0</ro.pf4j.version>
		<ro.pf4j-update.version>0.4.0</ro.pf4j-update.version>
		<ro.pf4j-spring.version>0.3.2</ro.pf4j-spring.version>
		<slf4j.version>1.7.21</slf4j.version>
		<spring.version>5.3.19</spring.version><!-- 4.3.x（JDK 1.7 ）、4.1.x（JDK 1.6）、4.0.x（JDK 1.6） -->
	</properties>

	<dependencyManagement>
		<dependencies>

			<!-- ######################测试工具包###################### -->

			<!--junit : Junit测试是程序员测试，即白盒测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>

			<!-- ######################日志组件工具包###################### -->

			<!-- SLF4J，即简单日志门面（Sample Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样 
				的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<!-- Commons项目中用来处理IO的一些工具类包 -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<!-- Commons项目中用来处理Java基本对象方法的工具类包， 可以简化很多平时经常要用到的写法， 例如判断字符串是否为空等等 -->
			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>${commons-lang.version}</version>
			</dependency>

			<!-- Java Servlet API -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${javax.servlet-api.version}</version>
			</dependency>
			 
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>${fastjson.version}</version>
			</dependency>
			
			<!-- https://mvnrepository.com/artifact/ro.fortsoft.pf4j -->
			<dependency>
				<groupId>ro.fortsoft.pf4j</groupId>
				<artifactId>pf4j</artifactId>
				<version>${ro.pf4j.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/ro.fortsoft.pf4j/pf4j-update -->
			<dependency>
			    <groupId>ro.fortsoft.pf4j</groupId>
			    <artifactId>pf4j-update</artifactId>
			    <version>${ro.pf4j-update.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/ro.fortsoft.pf4j/pf4j-spring -->
			<dependency>
				<groupId>ro.fortsoft.pf4j</groupId>
				<artifactId>pf4j-spring</artifactId>
				<version>${ro.pf4j-spring.version}</version>
				<exclusions>
					<exclusion>
						<groupId>log4j</groupId>
						<artifactId>log4j</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<!-- ###################### Spring 4.x 核心框架  ###################### -->
			
			<!-- 基于代理的AOP支持 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 基于AspectJ的切面 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aspects</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Bean支持，包括Groovy  -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 应用程序的运行时环境，包括调度和远程处理的抽象 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 用于把常用的第三方 类库集成到Spring的应用环境中的支持类 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- 被大多数其他Spring模块使用的核心工具类 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- Web支持包，包括客户端和web的远程访问 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- REST的web服务和用于web应用程序的mvc实现 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			
		</dependencies>
	</dependencyManagement>
    
	<build>
		<pluginManagement>
			<plugins>
				<!-- 编译插件：编译主代码至主输出目录 -->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.5.1</version> 
					<!-- 设置源文件编码方式 -->  
					<configuration>
						<defaultLibBundleDir>lib</defaultLibBundleDir> 
						<!-- 源代码编译版本 -->
						<source>1.7</source>
						<!-- 目标平台编译版本 -->
						<target>1.7</target>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!--  -->
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- 资源插件：复制主资源文件至主输出目录 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<!-- 解决资源文件的编码问题 -->  
					<configuration>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
					<!-- 复制测试资源文件至测试输出目录复制resources到classess -->
					<executions>
						<execution>
							<id>copy-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/classes</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/resources</directory>
										<!-- <filtering>true</filtering> -->
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- 依赖配置生成插件 ：自动复制maven依赖包到lib目录 -->  
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-dependency-plugin</artifactId>  
		            <version>2.10</version>  
		            <!-- 拷贝依赖的jar包到lib目录 -->  
		            <executions>  
	                    <execution>  
	                        <id>copy-dependencies</id>  
	                        <phase>package</phase>  
	                        <goals>  
	                            <goal>copy-dependencies</goal>  
	                        </goals>  
	                        <configuration>  
								<!-- <outputDirectory>${basedir}/src/main/webapp/WEB-INF/lib</outputDirectory>   -->
				                <!-- ${project.build.directory}为Maven内置变量，缺省为target  
				                <outputDirectory>${project.build.directory}/lib</outputDirectory>  --> 
				                <!-- 表示是否不包含间接依赖的包 -->  
				                <excludeTransitive>false</excludeTransitive>  
	                        </configuration>  
	                    </execution>  
	                </executions>  
		        </plugin>
				<!-- 单元测试插件 ：执行测试用例-->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!--
							forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
							pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
							once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。
						 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8</argLine>  
						<additionalClasspathElements>  
			                <additionalClasspathElement>${basedir}/target/test-classes</additionalClasspathElement>  
			            </additionalClasspathElements>  
			            <includes>  
			                <include>**/*Test.java</include> 
			            </includes> 
                        <excludes>
                            <exclude>**/TestBean.java</exclude>
                        </excludes>
					</configuration>					
				</plugin>
				<!-- jar包生成插件 ：创建项目jar包--> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-jar-plugin</artifactId>  
					<version>3.0.2</version>  
					<configuration> 
						<encoding>${project.build.sourceEncoding}</encoding>
						<skipIfEmpty>false</skipIfEmpty> 
	                    <archive>  
	                    	<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖  
	                        <manifest>  
	                            <addClasspath>true</addClasspath>  
	                            <classpathPrefix>lib/</classpathPrefix>  
	                            <mainClass>.....Main</mainClass>  
	                        </manifest>  -->
				            <manifest>
				              	<addClasspath>true</addClasspath>
				            </manifest>
	                    </archive>  
	                </configuration>  
				</plugin> 
				<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-install-plugin</artifactId>  
					<version>2.5.2</version>  
				</plugin> 
				<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-deploy-plugin</artifactId>  
		            <version>2.8.2</version>  
		        </plugin>
				<!-- 源码插件:发布时自动将源码同时发布 -->				
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-source-plugin</artifactId>
					 <version>3.0.1</version> 
					 <!-- 打包source文件为jar文件 -->
					 <configuration>  
					 	 <testFailureIgnore>true</testFailureIgnore>
					 	 <!-- 打包源码一起发布到maven仓库中 -->
	                     <attach>true</attach>  
	                     <encoding>${project.build.sourceEncoding}</encoding>  
	                 </configuration> 
					 <executions>
						 <execution>
							 <id>attach-sources</id>
							 <phase>package</phase>
							 <goals>
								<goal>jar-no-fork</goal>
							 </goals>
						 </execution>
					 </executions>
				</plugin>
				<!-- 文档插件:发布时自动生成文档 -->	
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-javadoc-plugin</artifactId>  
		            <version>2.10.4</version> 
					<configuration>  
	                    <aggregate>true</aggregate>  
	                    <argLine>-Dfile.encoding=UTF-8</argLine>
                       	<charset>${project.build.sourceEncoding}</charset> 
                        <encoding>${project.build.sourceEncoding}</encoding> 
                        <docencoding>${project.build.sourceEncoding}</docencoding> 
	                </configuration>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>				
		        </plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- 编译插件：编译主代码至主输出目录 -->  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 --> 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-jar-plugin</artifactId>  
			</plugin> 
			<!-- 源码插件:发布时自动将源码同时发布 -->				
			<plugin>
				 <groupId>org.apache.maven.plugins</groupId>
				 <artifactId>maven-source-plugin</artifactId>
			</plugin>
			<!-- 文档插件:发布时自动生成文档 	
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-javadoc-plugin</artifactId>  
	        </plugin>-->
			<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-install-plugin</artifactId>  
			</plugin> 
			<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-deploy-plugin</artifactId>  
	        </plugin>
        </plugins>
	</build>
	
</project>